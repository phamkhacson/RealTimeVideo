package videocall;





import java.awt.image.BufferedImage;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;

import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

import javax.swing.ImageIcon;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Phan Quang
 */
public class Server extends javax.swing.JFrame {
    //cờ điều khiển
    protected boolean controlling = true;
    //cờ nhận hình ảnh từ client
    protected boolean receiving = true;
    protected VideoControl thread2 = null;

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        VideoReveive thread = new VideoReveive();
        thread2 = new VideoControl();
        thread.start();
        thread2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tamDung = new javax.swing.JButton();
        dung = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        toi = new javax.swing.JLabel();
        sang = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        jLabel1.setText("jLabel1");

        tamDung.setText("Tam dung");
        tamDung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamDungActionPerformed(evt);
            }
        });

        dung.setText("Dung ket noi");
        dung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dungActionPerformed(evt);
            }
        });

        jSlider1.setValue(100);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        toi.setText("0%");

        sang.setText("100%");

        jLabel2.setText("Do sang:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tamDung)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dung)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toi)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sang)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tamDung)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dung)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(toi)))
                                    .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(sang))))
                .addContainerGap(191, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //người dùng click vào nút tạm dừng/tiếp tục
    private void tamDungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamDungActionPerformed
        try {
            // TODO add your handling code here:
            thread2.pauseVideo();
            tamDung.setText((tamDung.getText().compareTo("Tam dung") == 0) ? "Tiep tuc" : "Tam dung");
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tamDungActionPerformed
    //người dùng click vào nút dừng kết nối
    private void dungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dungActionPerformed
        try {
            // TODO add your handling code here:
            thread2.stopVideo();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dungActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        System.out.println("jslider value: "+jSlider1.getValue());
        try {
            thread2.changeBrightness(jSlider1.getValue());
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);

            }
        });
    }
    //nhận hình ảnh từ client và hiển thị
    class VideoReveive extends Thread {

        @Override
        public void run() {
            try {
                //System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                ServerSocket server = new ServerSocket(1221);
                int width = 320, height = 240, t = width * height, a = 0;
                int[] pixels = new int[width * height];
                
                File fileout = new File("src/video/test.mp4");
                
                //đợi kết nối từ client nếu có lỗi về trạng thái đợi kết nối
                while (true) {
                    try {
                        
                        Socket client = server.accept();
                        System.out.println("server accept " + (a++));
                        DataInputStream in = new DataInputStream(new BufferedInputStream(client.getInputStream()));
                        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
                        receiving = true;
                        //test
                        
                        
                        
                        while (receiving) {
                            //nhận ảnh
                            for (int i = 0; i < t; i++) {
                                pixels[i] = in.readInt();
                            }
                            //convert và hiển thị lên màn hình 
                            image.setRGB(0, 0, width, height, pixels, 0, width);
                            //test
                            //ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            //ImageIO.write(image, "jpg", baos);
                            //byte[] bytes = baos.toByteArray();
                            //Mat frame = new Mat(height, width, CvType.CV_8UC3);
                            //vWriter.write(frame);
                            //end test
                            
                            
                            jLabel1.setIcon(new ImageIcon(image));
                            //System.out.println(a++);
                            
                        }
                        
                        
                        in.close();
                        client.close();
                        System.out.println("client is closed");
                    } catch (Exception e) {
                        System.out.println("error: "+e);
                        
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

    }
    
    class VideoControl extends Thread {
        
        private ServerSocket server = null;
        private DataOutputStream out = null;
        private DataInputStream in = null;

        @Override
        public void run() {
            int port = 1222;
            
            try {
                server = new ServerSocket(port);
                while (true) {
                    //tạo kết nối điều khiển với client
                    Socket client = server.accept();
                    out = new DataOutputStream(new BufferedOutputStream(client.getOutputStream()));
                    in = new DataInputStream(new BufferedInputStream(client.getInputStream()));
                    System.out.println("server is listenning");

                }

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        //gửi tín hiệu tạm dừng / tiếp tục
        public void pauseVideo() throws IOException {
            out.writeInt(1);
            out.flush();
        }
        //gửi tín hiệu dừng ghi hình
        public void stopVideo() throws IOException {
            //gửi tín hiệu
            out.writeInt(2);
            out.flush();
            //chờ phản hồi
            in.readInt();
            out.close();
            receiving = false;

        }
        
        //gửi tín hiệu điều chỉnh độ sáng tối
        public void changeBrightness(int a) throws IOException{
            out.writeInt(3);
            out.flush();
            out.writeInt(a);
            
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dung;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel sang;
    private javax.swing.JButton tamDung;
    private javax.swing.JLabel toi;
    // End of variables declaration//GEN-END:variables
}

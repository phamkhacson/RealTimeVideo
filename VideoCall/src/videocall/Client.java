package videocall;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Phan Quang
 */
import com.github.sarxos.webcam.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import javax.swing.ImageIcon;

import java.awt.color.ColorSpace;
import java.awt.image.ColorConvertOp;
import java.awt.image.ImageFilter;
import java.awt.image.WritableRaster;

public class Client extends javax.swing.JFrame {

    //cờ điểu khiển chương trình
    protected boolean controling = true;
    //cờ ghi hình ảnh
    protected boolean recording = true;
    //cờ dừng webcam
    protected boolean stopping = false;
    //cờ sáng tối
    protected float percent = 1f;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
//        Thread thread = new Thread(new VideoRecord());
//        thread.start();
//        VideoRecord thread = new VideoRecord();
//        VideoControl thread2 = new VideoControl();
//        thread.start();
//        thread2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        connect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");

        jLabel1.setText("jLabel1");

        connect.setText("Bat dau");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(connect)
                .addGap(0, 69, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 171, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(connect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        VideoRecord thread = new VideoRecord();
        VideoControl thread2 = new VideoControl();
        thread.start();
        thread2.start();
    }//GEN-LAST:event_connectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    //ghi hình webcam và gửi cho server
    class VideoRecord extends Thread {

        Webcam webcam = Webcam.getDefault();

        @Override
        public void run() {
            int width = 320, height = 240, port = 1221, t = width * height, a = 0;
            String host = "127.0.0.1";

            try {
                Socket client = new Socket(host, port);

                DataOutputStream out = new DataOutputStream(new BufferedOutputStream(client.getOutputStream()));
                webcam.setViewSize(new Dimension(width, height));
                webcam.open();
                BufferedImage bufferedImage = null;
                WritableRaster wr = null;
                int[] pixels = new int[height * width];

                recording = true;
                stopping = false;
                while (!stopping) {
                    while (recording) {
                        bufferedImage = webcam.getImage();

                        //điều chỉnh độ sáng tối của hình ảnh
                        wr = bufferedImage.getRaster();
                        int[] pixel2 = new int[4];
                        for (int i = 0; i < wr.getWidth(); i++) {
                            for (int j = 0; j < wr.getHeight(); j++) {
                                wr.getPixel(i, j, pixel2);
                                pixel2[0] = (int) (pixel2[0] * percent);
                                pixel2[1] = (int) (pixel2[1] * percent);
                                pixel2[2] = (int) (pixel2[2] * percent);
                                pixel2[3] = (int) (pixel2[3] * percent);
                                wr.setPixel(i, j, pixel2);
                            }
                        }

                        //hiển thị lên màn hình client
                        jLabel1.setIcon(new ImageIcon(bufferedImage));

                        //chuyển hình ảnh thu được sang mảng số nguyên
                        bufferedImage.getRGB(0, 0, width, height, pixels, 0, width);

                        //gửi hình ảnh cho server
                        for (int i = 0; i < pixels.length; i++) {
                            out.writeInt(pixels[i]);

                        }
                        bufferedImage.flush();
                    }
                    System.out.println(recording);
                }
                //kết thúc phiên ghi hình
                webcam.close();
                out.close();
                client.close();
                dispose();;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

        }

    }

    //nhận tín hiệu điều khiển từ server
    class VideoControl extends Thread {

        private Socket client = null;
        private DataInputStream input = null;
        private DataOutputStream output = null;
        private boolean listenning = true;

        @Override
        public void run() {
            String host = "127.0.0.1";
            int port = 1222;
            try {
                //thiết lập kết nối điều khiển với server
                client = new Socket(host, port);
                input = new DataInputStream(new BufferedInputStream(client.getInputStream()));
                output = new DataOutputStream(new BufferedOutputStream(client.getOutputStream()));
                System.out.println("Client's waiting control message!");
                listenning = true;
                controling = true;
                while (controling) {

                    int flag = input.readInt();

                    switch (flag) {
                        //nhận được tín hiệu tạm dừng ghi hình
                        case 1: {
                            recording = !recording;
                            break;
                        }
                        //nhận được tín hiệu kết thúc ghi hình
                        case 2: {
                            recording = false;
                            stopping = true;
                            //đợi tắt cam và gửi tín hiệu thành công cho server
                            Thread.sleep(3000);
                            output.writeInt(3);
                            output.flush();
                            input.close();
                            client.close();
                            controling = false;
                            break;
                        }
                        //nhận được tín hiệu điều chỉnh độ sáng tối
                        case 3: {
                            percent = input.readInt() * 0.01f;
                        }
                    }
                    /*
                    if (flag == 1) {

                    }
                    
                    if (flag == 2) {
                        recording = false;
                        stopping = true;
                        //đợi tắt cam và gửi tín hiệu thành công cho server
                        Thread.sleep(3000);
                        output.writeInt(3);
                        output.flush();
                        input.close();
                        client.close();
                        controling = false;
                    }*/
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
